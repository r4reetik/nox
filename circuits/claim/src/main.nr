global MAX_TREE_DEPTH: u32 = 32;

use helpers::{commitment::commitment_hasher, LeanIMTInclusionProof::lean_imt_inclusion_proof};
use poseidon;

// Claims funds from one of existing notes, note_nonce is used to prevent replay attacks
// if existing nullifiers and secrets are null then we can assume user is new to system and we can create a new commitment.
// if existing nullifiers and secrets are not null then we topup/update balance of user accordingly
fn main(
    // Public inputs
    claim_value: pub Field,
    _note_nonce: pub Field,
    receiver_secretHash: pub Field,
    // could be null
    merkle_root: pub Field,
    existingNullifier: pub Field,
    // Private inputs
    label: Field,
    leaf_index: Field,
    receiver_secret: Field,
    newNullifier: Field,
    newSecret: Field,
    // could be null
    existingValue: Field,
    existingSecret: Field,
    siblings: [Field; MAX_TREE_DEPTH],
) -> pub Field {
    assert(receiver_secretHash == poseidon::poseidon2::Poseidon2::hash([receiver_secret], 1));

    let mut final_balance = claim_value;
    if (existingNullifier != 0) {
        let existingCommitment =
            commitment_hasher(existingNullifier, existingValue, label, existingSecret);
        let computed_merkle_root =
            lean_imt_inclusion_proof(existingCommitment, leaf_index, siblings);

        assert_eq(computed_merkle_root, merkle_root);

        final_balance += existingValue;
    }

    let newCommitment = commitment_hasher(newNullifier, final_balance, label, newSecret);

    newCommitment
}

#[test]
fn test_main() {
    let note_nonce = 12345;
    let claim_value = 500000000000000000;
    let existingNullifier = 5;
    let existingSecret = 10;
    let existingValue = 1000000000000000000;
    let receiver_secretHash = 0x29d532dfd7450897f3a457becb789ab8aaa85aa057c39805a609471519b68a16;
    let merkle_root = 0x0de6f3accefd10fa9b4b051932b99164ed2a6c01b6e9b87c8780210106181625;
    let leaf_index = 5;
    let label = 0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97;
    let receiver_secret = 66666;
    let newNullifier = 601;
    let newSecret = 602;
    let siblings: [Field; MAX_TREE_DEPTH] = [
        0x01a266bea8075ed4764fca5aa9b814960c483ccd158250bd39be32cf7601f85e,
        0x08d3fc1b356a70549258380c0a14fa88e867fae608de826c52e2dd4ac6925991,
        0x10f1429fb1ead8599a0983333927e3808984c2adbf461680fba56df177bd716b,
        0x13742416d4952f1d797784b0d35666a4a7a571b15216e4666a50413f1359c379,
        0x157c16f3a85aab8894515d346701cf48819a872da5da00c624b70da5d1d52799,
        0x2ba1a5a86b4ab6cb6fa65b4a9a467aa357215c3579a5440fb31f535578585d77,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
    ];

    let main_result = main(
        claim_value,
        note_nonce,
        receiver_secretHash,
        merkle_root,
        existingNullifier,
        label,
        leaf_index,
        receiver_secret,
        newNullifier,
        newSecret,
        existingValue,
        existingSecret,
        siblings,
    );

    assert(main_result == 0x29159b8cb187abd88dbc88851d73b10f8e898dd814d164b3da914959a018bb96);
}

#[test]
fn test_main2() {
    let note_nonce = 1;
    let claim_value = 2000000000000000000;
    let existingSecret = 0;
    let existingNullifier = 0;
    let existingValue = 0;
    let label = 0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97;
    let leaf_index = 0;
    let merkle_root = 0;
    let newNullifier = 601;
    let newSecret = 602;
    let receiver_secret = 66666;
    let receiver_secretHash = 0x29d532dfd7450897f3a457becb789ab8aaa85aa057c39805a609471519b68a16;
    let siblings: [Field; MAX_TREE_DEPTH] = [
        0x01a266bea8075ed4764fca5aa9b814960c483ccd158250bd39be32cf7601f85e,
        0x08d3fc1b356a70549258380c0a14fa88e867fae608de826c52e2dd4ac6925991,
        0x10f1429fb1ead8599a0983333927e3808984c2adbf461680fba56df177bd716b,
        0x13742416d4952f1d797784b0d35666a4a7a571b15216e4666a50413f1359c379,
        0x157c16f3a85aab8894515d346701cf48819a872da5da00c624b70da5d1d52799,
        0x2ba1a5a86b4ab6cb6fa65b4a9a467aa357215c3579a5440fb31f535578585d77,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
    ];

    let main_result = main(
        claim_value,
        note_nonce,
        receiver_secretHash,
        merkle_root,
        existingNullifier,
        label,
        leaf_index,
        receiver_secret,
        newNullifier,
        newSecret,
        existingValue,
        existingSecret,
        siblings,
    );

    // println(main_result);
    assert(main_result == 0x28c1f1ee34da8b475edbcd50df1fd539075e650973ccf0ccbe75eade07267a97);
}
